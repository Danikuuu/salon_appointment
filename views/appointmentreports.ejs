<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Appointment Reports</title>
<style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f9f9f9;
            margin: 0;
            padding: 20px;
        }
        h1 {
            text-align: center;
            color: #333;
        }
        .container {
            max-width: 1200px;
            margin: auto;
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }
        .section {
            margin-bottom: 20px;
        }
        .section h2 {
            margin-bottom: 10px;
            font-size: 1.2em;
            color: #555;
        }
        input[type="text"], input[type="date"], button {
            padding: 10px;
            margin-right: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        button {
            cursor: pointer;
            background-color: #BDAC8E;
            color: #fff;
            border: none;
        }
        button:hover {
            background-color: #BDAC8E;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 12px;
            text-align: left;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .actions {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .total-appointments {
            font-weight: bold;
        }
        .appointments-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Appointment Reports</h1>
        
        <div class="actions">
            <div>
                <input type="text" id="searchQuery" placeholder="Search...">
                <button id="searchAppointments">Search</button>
                <button id="clearSearch">Clear</button>
            </div>
            <div>
                <input type="date" id="startDate" required>
                <input type="date" id="endDate" required>
                <button id="filterAppointments">Filter</button>
                <button id="clearFilters">Clear</button>
            </div>
            <div>
                <button id="exportAppointments">Export to CSV</button>
            </div>
        </div>

        <div>
            <div class="appointments-header">
                <h2>All Appointments</h2>
                <div class="total-appointments">
                    Total Appointments: <span id="appointmentCount">0</span>
                </div>
            </div> 
            <table id="appointmentsTable">
                <thead>
                    <tr>
                        <th>Full Name</th>
                        <th>Email</th>
                        <th>Address</th>
                        <th>Contact</th>
                        <th>Gender</th>
                        <th>Service</th>
                        <th>Appointment Date</th>
                        <th>Appointment Time</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Appointments will be populated here -->
                </tbody>
            </table>
        </div>
    </div>

    <script>
        let appointments = []; // Global variable to hold fetched appointments
    
        // Function to populate the appointments table
        const populateAppointmentsTable = (data) => {
            const tbody = document.querySelector('#appointmentsTable tbody');
            tbody.innerHTML = ''; // Clear existing data
    
            if (data.length === 0) {
                const row = `<tr><td colspan="8">No appointments found.</td></tr>`;
                tbody.innerHTML += row;
            } else {
                data.forEach(appointment => {
                    const row = `<tr>
                        <td>${appointment.fullName}</td>
                        <td>${appointment.email}</td>
                        <td>${appointment.address}</td>
                        <td>${appointment.contact}</td>
                        <td>${appointment.gender}</td>
                        <td>${appointment.service}</td>
                        <td>${new Date(appointment.appointmentDate).toLocaleDateString()}</td>
                        <td>${appointment.appointmentTime}</td>
                    </tr>`;
                    tbody.innerHTML += row;
                });
            }

            // Update the total count of appointments
            document.getElementById('appointmentCount').textContent = data.length;
        };
    
        // Fetch appointments from the backend when the page loads
        document.addEventListener('DOMContentLoaded', async () => {
            try {
                const response = await fetch('/appointments'); // Fetch data from the backend
                appointments = await response.json(); // Parse the JSON response and store it in the global variable
                populateAppointmentsTable(appointments); // Populate the table with the fetched data
            } catch (error) {
                console.error('Error fetching appointments:', error);
            }
        });
    
        // Filter appointments
        document.getElementById('filterAppointments').addEventListener('click', () => {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
    
            // Filter logic
            const filteredAppointments = appointments.filter(appointment => {
                const appointmentDate = new Date(appointment.appointmentDate);
                return appointmentDate >= new Date(startDate) && appointmentDate <= new Date(endDate);
            });
    
            populateAppointmentsTable(filteredAppointments);
        });
    
        // Clear filters
        document.getElementById('clearFilters').addEventListener('click', () => {
            document.getElementById('startDate').value = '';
            document.getElementById('endDate').value = '';
            populateAppointmentsTable(appointments); // Show all appointments
        });

        // Search appointments
        document.getElementById('searchAppointments').addEventListener('click', async () => {
            const query = document.getElementById('searchQuery').value;

            if (query.trim() === '') {
                populateAppointmentsTable(appointments);
                return;
            }

            try {
                const response = await fetch(`/search-appointments?query=${query}`);
                const searchResults = await response.json();
                populateAppointmentsTable(searchResults);
            } catch (error) {
                console.error('Error searching appointments:', error);
            }
        });

        // Clear search
        document.getElementById('clearSearch').addEventListener('click', () => {
            document.getElementById('searchQuery').value = '';
            populateAppointmentsTable(appointments); // Show all appointments
        });
    
        // Export appointments to CSV
        document.getElementById('exportAppointments').addEventListener('click', () => {
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
    
            window.open(`/export-appointments?startDate=${startDate}&endDate=${endDate}`, '_blank');
        });
    </script>
</body>
</html>
